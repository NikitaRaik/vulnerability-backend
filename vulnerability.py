import motor.motor_asyncio
from model import VulnerabilityOutput
from bson import ObjectId
import pymongo


DATABASE_URL = "mongodb://localhost:27017"
client = motor.motor_asyncio.AsyncIOMotorClient(
    DATABASE_URL, uuidRepresentation="standard"
)
# client = motor.motor_asyncio.AsyncIOMotorClient("mongodb+srv://vulnerability:<123456789asdfg!@#>@cluster0.bmfvm.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
# client = pymongo.MongoClient(
#     "mongodb+srv://vulnerability:299792458tnt.@cluster0.bmfvm.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")

db = client['vulnerability_db']
vulnerability_tb = db['vulnerability']


async def fetch_all_vulnerabilities():
    vulnerabilities = []
    cursor = vulnerability_tb.find({})
    async for document in cursor:
        # for document in cursor:
        vulnerabilities.append(VulnerabilityOutput(**document))

    print(vulnerabilities)
    return vulnerabilities


async def create_vulnerability(vulnerability):
    document = vulnerability
    result = await vulnerability_tb.insert_one(document)
    # result = vulnerability_tb.insert_one(document)
    return document


async def update_vulnerability(id, body):
    print(body, body.cve)
    await vulnerability_tb.update_one({"_id": ObjectId(id)}, {"$set": {
        "type": body.type, "cve": body.cve, "name": body.name, "solution": body.solution}})
    document = await vulnerability_tb.find_one({"_id": ObjectId(id)})
    # document = vulnerability_tb.find_one({"_id": ObjectId(id)})
    return document


async def fetch_one_vulnerability(id):
    document = await vulnerability_tb.find_one({"_id": ObjectId(id)})
    # document = vulnerability_tb.find_one({"_id": ObjectId(id)})
    return document


async def remove_vulnerability(id):
    await vulnerability_tb.delete_one({"_id": ObjectId(id)})
    # vulnerability_tb.delete_one({"_id": ObjectId(id)})
    return True
