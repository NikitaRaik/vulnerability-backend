#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI, Request, Depends, HTTPException
from user import User, UserCreate, UserUpdate, UserDB, auth_backends, fastapi_users
from vulnerability import (
    create_vulnerability,
    fetch_all_vulnerabilities,
    update_vulnerability,
    fetch_one_vulnerability,
    remove_vulnerability,
)
from model import VulnerabilityOutput, VulnerabilityInput

# Initiating FastAPI Server
app = FastAPI()

# Managing CORS for the React Frontend connections
origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)


# --- User Authentication Routes ----------------------------------------------

# Learn more at https://frankie567.github.io/fastapi-users/configuration/routers/

# Add route for Login                           POST "/auth/login", "/auth/register"
app.include_router(
    fastapi_users.get_auth_router(auth_backends[0]),
    prefix="/auth",
    tags=["auth"]
)


def on_after_register(user: UserDB, request: Request):
    print("User {user.id} has registered.")


app.include_router(
    # fastapi_users.get_register_router(),
    fastapi_users.get_register_router(on_after_register),
    prefix="/auth",
    tags=["auth"]
)

# Add route for User utilities "/auth/users/*"

""" 
    Get current logged in user profile          GET "/auth/users/me"
    Update current logged in user profile       PATCH "/auth/users/me"
    Get "_id" user profile                      GET "/auth/users/"
    Update "_id" user profile                   PATCH "/auth/users/{id}"
    Delete "_id" user profile                   DELETE "/auth/users/{id}" 
"""

app.include_router(
    fastapi_users.get_users_router(),
    prefix="/auth/users",
    tags=["auth"]
)

# Add route for Reset Password utility

"""
    Forgot Password                             POST /auth/users/forgot-password
    Reset Password                              POST /auth/users/reset-password                         
"""

app.include_router(
    fastapi_users.get_reset_password_router("SECRET"),
    prefix="/auth/users",
    tags=["auth"]
)


# --- Custom Unprotected Routes Template --------------------------------------

@app.get("/custom-unprotected-route", tags=["unprotected-routes"])
async def get_custom_unprotected_route():
    # Add database CRUD operation logic here
    return "Success!"


@app.post("/custom-unprotected-route", tags=["unprotected-routes"])
async def post_custom_unprotected_route(
    body: dict
):
    # Add database CRUD operation logic here
    print(body)
    return "Success!"


# --- Custom Protected Routes Template ----------------------------------------

@app.get("/custom-protected-route", tags=["protected-routes"])
async def get_custom_protected_route(
    user: User = Depends(fastapi_users.get_current_user)
):
    # Add database CRUD operation logic here
    return "Success!"


@app.post("/custom-protected-route", tags=["protected-routes"])
async def post_custom_protected_route(
    body: dict,
    user: User = Depends(fastapi_users.get_current_user)
):
    # Add database CRUD operation logic here
    print(body)
    return "Success!"

# ----------------- Vulnerability CRUD urls --------------------------------


@app.get("/api/vulnerability", tags=["vulnerability crud"])
async def get_vulnerability():
    response = await fetch_all_vulnerabilities()
    return response


@app.post("/api/vulnerability/", response_model=VulnerabilityOutput, tags=["vulnerability crud"])
async def post_vulnerability(vulnerability: VulnerabilityInput):
    response = await create_vulnerability(vulnerability.dict())
    if response:
        return response
    raise HTTPException(400, "Something went wrong")


@app.put("/api/vulnerability/{id}/", response_model=VulnerabilityOutput, tags=["vulnerability crud"])
async def put_vulnerability(id: str, body: VulnerabilityInput):
    response = await update_vulnerability(id, body)
    if response:
        return response
    raise HTTPException(
        404, f"There is no vulnerability with the id {id}")


@app.get("/api/vulnerability/{id}", response_model=VulnerabilityOutput, tags=["vulnerability crud"])
async def get_vulnerability_by_id(id):
    response = await fetch_one_vulnerability(id)
    if response:
        return response
    raise HTTPException(
        404, f"There is no vulnerability with the id {id}")


@app.delete("/api/vulnerability/{id}", tags=["vulnerability crud"])
async def delete_vulnerability(id):
    response = await remove_vulnerability(id)
    if response:
        return "Successfully deleted vulnerability"
    raise HTTPException(
        404, f"There is no vulnerability with the id {id}")
